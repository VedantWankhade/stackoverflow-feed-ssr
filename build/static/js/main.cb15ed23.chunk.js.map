{"version":3,"sources":["components/Header/Header.js","components/Owner/Owner.js","components/Card/Card.js","containers/Feed.js","containers/App.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","div","Title","h1","Header","OwnerWrapper","Avatar","img","Name","h3","Owner","data","src","profile_image","display_name","CardWrapper","h2","Meta","Count","Card","title","view_count","answer_count","owner","FeedWrapper","Alert","Feed","state","loading","error","fetch","json","dataJSON","this","setState","message","items","map","item","key","question_id","Component","GlobalStyle","createGlobalStyle","AppWrapper","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb15ed23.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderWrapper = styled.div`\n  background-color: orange;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst Title = styled.h1`\n  pointer-events: none;\n`;\n\nconst Header = () => (\n  <HeaderWrapper>\n    <Title>Q&A Feed</Title>\n  </HeaderWrapper>\n);\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst OwnerWrapper = styled.div`\n  display: flex;\n  flex-basis: 40%;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst Avatar = styled.img`\n  display: block;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n`;\n\nconst Name = styled.h3`\n  margin-left: 5%;\n`;\n\nconst Owner = ({ data }) => (\n  <OwnerWrapper>\n    <Avatar src={data.profile_image} />\n    <Name>{data.display_name}</Name>\n  </OwnerWrapper>\n);\n\nexport default Owner;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Owner from '../Owner/Owner';\n\nconst CardWrapper = styled.div`\n  text-align: left;\n  padding: 1%;\n  background: lightGray;\n  border-radius: 5px;\n  margin-bottom: 2%;\n`;\n\nconst Title = styled.h2`\n  width: 100%;\n  padding-bottom: 10px;\n  text-align: center;\n  border-bottom: 1px solid darkGray;\n`;\n\nconst Meta = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0 2%;\n`;\n\nconst Count = styled.div`\n  flex-basis: 80%;\n`;\n\nconst Card = ({ data }) => (\n  <CardWrapper>\n    <Title>{data.title}</Title>\n    <Meta>\n      <Count>\n        {`Views: ${data.view_count} | Answers: ${data.answer_count}`}\n      </Count>\n      <Owner data={data.owner} />\n    </Meta>\n  </CardWrapper>\n);\n\nexport default Card;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Card from '../components/Card/Card';\n\nconst FeedWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  margin: 5%;\n`;\n\nconst Alert = styled.div`\n  text-align: center;\n`;\n\nconst ROOT_API = 'https://api.stackexchange.com/2.2/';\n\nclass Feed extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      loading: true,\n      error: '',\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const data = await fetch(\n        `${ROOT_API}questions?order=desc&sort=activity&tagged=reactjs&site=stackoverflow`,\n      );\n      const dataJSON = await data.json();\n\n      if (dataJSON) {\n        this.setState({\n          data: dataJSON,\n          loading: false,\n        });\n      }\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: error.message,\n      });\n    }\n  }\n\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return <Alert>{loading ? 'Loading...' : error}</Alert>;\n    }\n\n    return (\n      <FeedWrapper>\n        {data.items.map(item => (\n          <Card key={item.question_id} data={item} />\n        ))}\n      </FeedWrapper>\n    );\n  }\n}\n\nexport default Feed;\n","import React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Header from '../components/Header/Header';\nimport Feed from './Feed';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  text-align: center;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <AppWrapper>\n          <Header />\n          <Feed />\n        </AppWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}